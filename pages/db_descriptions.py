import streamlit as st
from datetime import datetime
import os
from docx import Document
import openai
import json
from dotenv import load_dotenv
from minions import letter_to_text

load_dotenv()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é GPT (–Ω–∞–ø—Ä–∏–º–µ—Ä, Llama)
# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class LlamaModel:
    def __init__(self):
        self.api_key = os.getenv('OPENAI_TOKEN_API')  # –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ API
        self.base_url = os.getenv('BASE_OPENAI_URL')
        self.max_input_tokens = 2048  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.max_response_tokens = 2048  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    def count_tokens(self, messages):
        tokens = sum(len(message["content"].split()) for message in messages)
        return tokens

    def get_response(self, message):
        messages = [
            {"role": "user", "content": message}
        ]

        total_tokens = self.count_tokens(messages)
        if total_tokens > self.max_input_tokens:
            return "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ."

        client = openai.Client(
            api_key=self.api_key,
            base_url=self.base_url,
        )

        response = client.chat.completions.create(
            model="openai/gpt-4o-2024-11-20",  # –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, OpenAI GPT-3
            messages=messages,
            temperature=0.4,  # –°—Ç–µ–ø–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            max_tokens=1500,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            top_p=0.3,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ nucleus sampling
            frequency_penalty=0.1,  # –®—Ç—Ä–∞—Ñ –∑–∞ —á–∞—Å—Ç–æ—Ç—É
            presence_penalty=0.1,  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
        )

        return response.choices[0].message.content


# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
# def create_db_description():
#     st.title("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
#     folders = os.listdir(r"db_docs")
#     law = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", folders)
#     law_name = st.text_input("üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
#     law_description = st.text_input("üîπ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
#     if st.button("üìå –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ë–î"):
#         try:
#             # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
#             with open("db_description.json", "r", encoding="utf-8") as json_file:
#                 db_desc = json.load(json_file)
#
#         except FileNotFoundError:
#             # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
#             db_desc = {"law_db": []}
#         #     for i in db_desc["law_db_folder"]:
#         #         if i == law:
#         #             st.warning(f"–ë–∞–∑–∞ —Å –∑–∞–∫–æ–Ω–æ–º {law} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
#         with open("db_description.json", "r+"):
#             data = {
#                 "law_db": law,
#                 "law_name": law_name,
#                 "law_description": law_description
#             }
#             db_desc["law_db"].append(data)
#
# if __name__ == "__main__":
#     create_db_description()
