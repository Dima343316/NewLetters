import os
from datetime import datetime
from docx import Document

import openai
import streamlit as st
from dotenv import load_dotenv
from minions import letter_to_text

load_dotenv()


class LlamaModel:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é GPT (–Ω–∞–ø—Ä–∏–º–µ—Ä, Llama)."""

    def __init__(self):
        self.api_key = os.getenv("OPENAI_TOKEN_API")
        self.base_url = os.getenv("BASE_OPENAI_URL")
        self.max_input_tokens = 2048
        self.max_response_tokens = 2048

    def count_tokens(self, messages):
        return sum(len(message["content"].split()) for message in messages)

    def get_response(self, message):
        messages = [{"role": "user", "content": message}]

        if self.count_tokens(messages) > self.max_input_tokens:
            return "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ."

        client = openai.Client(api_key=self.api_key, base_url=self.base_url)
        response = client.chat.completions.create(
            model="openai/gpt-4o-2024-11-20",
            messages=messages,
            temperature=0.4,
            max_tokens=1500,
            top_p=0.3,
            frequency_penalty=0.1,
            presence_penalty=0.1,
        )
        return response.choices[0].message.content


class PasteValues:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π."""

    def __init__(self, template_path, data):
        self.template_path = template_path
        self.data = data

    def change_values(self, letter_body):
        current_datetime = datetime.now().strftime("%Y%m%d-%H%M%S")
        filename = f"docs/result/result_{current_datetime}.docx"
        os.makedirs(os.path.dirname(filename), exist_ok=True)

        doc = Document(self.template_path)

        for p in doc.paragraphs:
            for key, value in self.data.items():
                placeholder = f"${{{key}}}"
                if placeholder in p.text:
                    for run in p.runs:
                        run.text = run.text.replace(placeholder, value)

        for p in doc.paragraphs:
            if "${letter_body}" in p.text:
                for run in p.runs:
                    run.text = run.text.replace("${letter_body}", letter_body)

        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for key, value in self.data.items():
                        placeholder = f"${{{key}}}"
                        if placeholder in cell.text:
                            for paragraph in cell.paragraphs:
                                for run in paragraph.runs:
                                    run.text = run.text.replace(placeholder, value)

        doc.save(filename)
        return filename


def create_letter_page():
    st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º")

    fio_recipient = st.text_input("üîπ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û...")
    position_recipient = st.text_input("üîπ –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...")
    laws = st.text_area("‚öñ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã:", placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∑–∞–∫–æ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é...")
    comments = st.text_area("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:", placeholder="–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–∏—Å—å–º—É...")
    topic_body = st.text_input("üìù –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –ø–∏—Å—å–º–∞:", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–∏—Å—å–º–∞...")
    fio_sender = st.text_input("‚úç –§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û...")
    doc_date = st.date_input("üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", value=datetime.today())

    incoming_letter = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ", type=["pdf", "docx", "txt", "odt"])
    flag_incoming = False

    if incoming_letter and st.button("üìå –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ"):
        flag_incoming = True
        text_of_doc = letter_to_text.extract_text_from_file(incoming_letter)
        llama_model = LlamaModel()
        incoming_gpt = f"""
            –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏—Å—å–º–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
            1. –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            3. –î–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            4. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø–∏—Å—å–º–∞

            –í–æ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞: {text_of_doc}

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑.
        """
        doc_incoming = llama_model.get_response(incoming_gpt)
        st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞", doc_incoming, height=400)

    if st.button("üìå –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ"):
        llama_model = LlamaModel()
        gpt_input = f"""
            –°–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
            –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –≤ —Å—Ç—Ä–æ–≥–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π.

            1. –ó–∞–∫–æ–Ω—ã: {laws}
            2. –¢–µ–º–∞: {topic_body}
            3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}
        """

        if flag_incoming:
            gpt_input = f"""
                –°–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ {doc_incoming}.

                1. –ó–∞–∫–æ–Ω—ã: {laws}
                2. –¢–µ–º–∞: {topic_body}
                3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}
            """

        letter_body = llama_model.get_response(gpt_input)

        data = {
            "fio_recipient": fio_recipient,
            "position_recipient": position_recipient,
            "laws": laws,
            "topic_body": topic_body,
            "fio_sender": fio_sender,
            "doc_date": str(doc_date),
            "letter_body": letter_body,
        }

        paste_values = PasteValues("docs/sample/docx_sample.docx", data)
        generated_filename = paste_values.change_values(letter_body)

        with open(generated_filename, "rb") as f:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –ø–∏—Å—å–º–æ",
                data=f,
                file_name=generated_filename,
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )


if __name__ == "__main__":
    create_letter_page()
